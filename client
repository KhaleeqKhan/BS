#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <errno.h>
#define MAX_CLIENTS 10


int put(char* key, char* value);
int get(char* key, char* res);
int del(char* key);
int transactionInProgress = 0;
int clientInTransaction = 0;

typedef struct {
    int socket;
    char key[256];
} Subscription;

typedef struct {
    Subscription subscriptions[MAX_CLIENTS];
    int count;
} SubscriptionList;

void processCommand(const char* command, char* response, SubscriptionList* subscriptionList, int sd) {
    char cmd[4];
    char key[256];
    char value[256];

    sscanf(command, "%s %s %s", cmd, key, value);


    if (strcmp(cmd, "GET") == 0) {
        if (transactionInProgress) {
            sprintf(response, "ERR:Transaction in progress\n");
        } else {
            if (get(key, value) == 0) {
                sprintf(response, "GET:%s:%s\n", key, value);
            } else {
                sprintf(response, "GET:%s:key_nonexistent\n", key);
            }
        }
    } else if (strcmp(cmd, "PUT") == 0) {
        if (transactionInProgress) {
            sprintf(response, "ERR:Transaction in progress\n");
        } else {
            if (put(key, value) == 0) {
                sprintf(response, "PUT:%s:%s\n", key, value);
            } else {
                sprintf(response, "PUT:%s:%s\n", key, "FEHLER");
            }
        }
    } else if (strcmp(cmd, "DEL") == 0) {
        if (transactionInProgress) {
            sprintf(response, "ERR:Transaction in progress\n");
        } else {
            if (del(key) == 0) {
                sprintf(response, "DEL:%s:key_deleted\n", key);
            } else {
                sprintf(response, "DEL:%s:key_nonexistent\n", key);
            }
        }
    } else if (strcmp(cmd, "BEG") == 0) {
        if (transactionInProgress) {
            sprintf(response, "ERR:Transaction already in progress\n");
        } else {
            transactionInProgress = 1;
            clientInTransaction = 1;
            sprintf(response, "BEG:Transaction started\n");
        }
    } else if (strcmp(cmd, "END") == 0) {
        if (clientInTransaction) {
            transactionInProgress = 0;
            clientInTransaction = 0;
            sprintf(response, "END:Transaction ended\n");
        } else {
            sprintf(response, "ERR:No transaction in progress\n");
        }

    } else if (strcmp(cmd, "SUB") == 0) {
        Subscription* newSubscription = &(subscriptionList->subscriptions[subscriptionList->count]);
        newSubscription->socket = sd;
        strncpy(newSubscription->key, key, sizeof(newSubscription->key));
        subscriptionList->count++;
        sprintf(response, "SUB:%s:%s\n", key, value);

    } else if (strcmp(cmd, "QUIT") == 0) {
        sprintf(response, "QUIT");
    } else {
        sprintf(response, "BITTE NUR GET-,PUT-,DEL-,BEG-,END-, SUB-,QUIT-BEFEHLE\n");
    }
}

void publishUpdate(const char* key, const char* value, SubscriptionList* subscriptionList) {
    char response[1024];
    sprintf(response, "UPDATE:%s:%s\n", key, value);

    for (int i = 0; i < subscriptionList->count; i++) {
        Subscription* subscription = &(subscriptionList->subscriptions[i]);
        if (strcmp(subscription->key, key) == 0) {
            if (write(subscription->socket, response, strlen(response)) <= 0) {
                perror("Fehler beim Senden der Aktualisierung an den Client");
            }
        }
    }
}



int main() {
    int serverSocket, newSocket;
    struct sockaddr_in serverAddress, clientAddress;
    int opt = 1;
    int addrlen = sizeof(struct sockaddr_in);
    char buffer[5678];
    int clientSockets[MAX_CLIENTS];
    fd_set readfds;
    int maxSd, sd, activity;
    int i;

    SubscriptionList subscriptions;
    subscriptions.count = 0;

    for (i = 0; i < MAX_CLIENTS; i++) {
        clientSockets[i] = 0;
    }

// Socket erstellen

    if ((serverSocket = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
        perror("Socket konnte nicht erstellt werden");
        exit(EXIT_FAILURE);
    }

    if (setsockopt(serverSocket, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {
        perror("setsocket konnte nicht erstellt werden");
        exit(EXIT_FAILURE);
    }

    serverAddress.sin_family = AF_INET;
    serverAddress.sin_addr.s_addr = INADDR_ANY;
    serverAddress.sin_port = htons(5678);

// Socketverbindung wird erstellt
    if (bind(serverSocket, (struct sockaddr *) &serverAddress, sizeof(serverAddress)) < 0) {
        perror("Verbindung konnte nicht erstellt werden");
        exit(EXIT_FAILURE);
    }

    if (listen(serverSocket, 3) < 0) {
        perror("Listen fehlgeschlagen");
        exit(EXIT_FAILURE);
    }




// SERVER wird gestartet
    printf("\nSERVER START::5678\n");


    while (1) {

        FD_ZERO(&readfds);
        FD_SET(serverSocket, &readfds);
        maxSd = serverSocket;

        for (i = 0; i < MAX_CLIENTS; i++) {
            sd = clientSockets[i];

            if (sd > 0) {
                FD_SET(sd, &readfds);
            }

            if (sd > maxSd) {
                maxSd = sd;
            }
        }

        activity = select(maxSd + 1, &readfds, NULL, NULL, NULL);

        if ((activity < 0) && (errno != EINTR)) {
            perror("Select fehlgeschlagen");
            exit(EXIT_FAILURE);
        }

        if (FD_ISSET(serverSocket, &readfds)) {
            if ((newSocket = accept(serverSocket, (struct sockaddr *) &clientAddress, (socklen_t *) &addrlen)) <
                0) {
                perror("Accept fehlgeschlagen");
                exit(EXIT_FAILURE);
            }

            printf("\nClient ist verbunden\n");

            for (i = 0; i < MAX_CLIENTS; i++) {
                if (clientSockets[i] == 0) {
                    clientSockets[i] = newSocket;
                    break;
                }
            }
        }

        for (i = 0; i < MAX_CLIENTS; i++) {
            sd = clientSockets[i];

            if (FD_ISSET(sd, &readfds)) {
                memset(buffer, 0, sizeof(buffer));
                int valRead = read(sd, buffer, sizeof(buffer));

                if (valRead <= 0) {
                    if (valRead == 0) {
                        printf("Client hat die Verbindung geschlossen\n");
                    } else {
                        perror("Anfrage vom Client konnte nicht empfangen werden");
                    }
                    close(sd);
                    clientSockets[i] = 0;
                } else {
                    char response [1024];
                    processCommand(buffer, response, &subscriptions, sd);

                    if (write(sd, response, strlen(response)) <= 0) {
                        perror("Antwort an den Client konnte nicht gesendet werden");
                        close(sd);
                        clientSockets[i] = 0;
                    } else if (strcmp(response, "QUIT") == 0) {
                        printf("Client ist disconnected\n");
                        close(sd);
                        clientSockets[i] = 0;
                    } else {

                        if (strncmp(buffer, "SUB ", 4) == 0) {
                            char key[256];
                            sscanf(buffer + 4, "%s", key);

                            Subscription *subscription = &(subscriptions.subscriptions[subscriptions.count]);
                            subscription->socket = sd;
                            strncpy(subscription->key, key, sizeof(subscription->key));
                            subscriptions.count++;

                            sprintf(response, "SUB:%s:key_subscribed\n", key);
                        } else if (strncmp(buffer, "GET ", 4) == 0) {
                            char key[256];
                            sscanf(buffer + 4, "%s", key);
                            get(key, response);
                        } else if (strncmp(buffer, "PUT ", 4) == 0) {
                            char key[256];
                            char value[256];
                            sscanf(buffer + 4, "%s %s", key, value);
                            put(key, value);
                            publishUpdate(key, value, &subscriptions);

                            sprintf(response, "PUT:%s:%s\n", key, value);
                        } else if (strncmp(buffer, "DEL ", 4) == 0) {
                            char key[256];
                            sscanf(buffer + 4, "%s", key);
                            del(key);
                            publishUpdate(key, "key_deleted", &subscriptions);

                            sprintf(response, "DEL:%s:key_deleted\n", key);
                        } else if (strncmp(buffer, "BEG", 3) == 0) {
                            if (transactionInProgress) {
                                sprintf(response, "ERR:Transaction already in progress\n");
                            } else {
                                transactionInProgress = 1;
                                clientInTransaction = 1;
                                sprintf(response, "BEG:Transaction started\n");
                            }
                        } else if (strncmp(buffer, "END", 3) == 0) {
                            if (clientInTransaction) {
                                transactionInProgress = 0;
                                clientInTransaction = 0;
                                sprintf(response, "END:Transaction ended\n");
                            } else {
                                sprintf(response, "ERR:No transaction in progress\n");
                            }
                        } else {
                            sprintf(response, "ERR:Invalid command\n");


                            if (write(sd, response, strlen(response)) <= 0) {
                                perror("Antwort an den Client konnte nicht gesendet werden");
                                close(sd);
                                clientSockets[i] = 0;
                            }
                        }
                    }
                }
            }
        }
    }
}

